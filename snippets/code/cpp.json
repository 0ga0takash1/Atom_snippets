{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"input1": {
        "prefix" : "in1",
        "body":"int64_t n;\ncin >> n;",
		"description": "input1"
	},
	"input2": {
		"prefix": "in2",
		"body":"int64_t n, m;\ncin >> n >> m;",
		"description": "input2"
	},
	"input3": {
		"prefix": "in3",
		"body":"int64_t n, m, k;\ncin >> n >> m >> k;",
		"description": "input3"
	},
	"input4": {
		"prefix": "in4",
		"body": [
		  "int64_t a, b, c, d;\\ncin >> a >> b >> c >> d;"
		],
		"description": "input4"
	},
	"input_string": {
		"prefix": "ins1",
		"body": [
		  "string s;\\ncin >> s;"
		],
		"description": "input_string"
	},
	"input_array": {
		"prefix": "inarray",
		"body": [
		  "std::vector<int64_t> a(n);",
		  "rep(i, n) {",
		  "    cin >> a[i];",
		  "}"
		],
		"description": "input_array"
	},
	"input_2arrays": {
		"prefix": "in2arrays",
		"body": [
		  "std::vector<int64_t> a(n), b(n);",
		  "rep(i, n) {",
		  "    cin >> a[i] >> b[i];",
		  "}"
		],
		"description": "input_2arrays"
	},
	"input_array2": {
		"prefix": "inarray2",
		"body": [
		  "std::vector<std::vector<int64_t>> a(n, std::vector<int64_t>(k));",
		  "rep(i, n) {",
		  "    rep(j, k) {",
		  "        cin >> a[i][j];",
		  "    }",
		  "}"
		],
		"description": "input_array2"
	},
	"output":{
		"prefix": "o",
		"body": "cout << ans << endl;",
		"description": "output"
	},
	"output2": {
		"prefix": "o2",
		"body": [
		  "cout << n << \" \" << m << endl;"
		],
		"description": "output2"
	},
	"output3": {
		"prefix": "o3",
		"body": [
		  "cout << n << \" \" << m << \" \" << k << endl;"
		],
		"description": "output3"
	},
	"output?":{
		"prefix": "o?",
		"body": "cout << (ans ? \"Yes\" : \"No\") << endl;",
		"description": "output?"
	},
	"output_array": {
		"prefix": "oarray",
		"body": [
		  "rep(i, n) {",
		  "    cout << a[i] << \" \";",
		  "}",
		  "cout << endl;"
		],
		"description": "output_array"
	},
	"output_comment": {
		"prefix": "oc",
		"body": "cout << \"Yes\" << endl;",
		"description": "output_comment"
	},
	"output_comment_ans": {
		"prefix": "oca",
		"body": "cout << \"a \" << ans << endl;",
		"description": "output_comment_ans"
	},
	"vector2": {
		"prefix": "vec2",
		"body": "std::vector<std::vector<int64_t>> a(n, std::vector<int64_t>(k));",
		"description": "vector2"
	},
	"ans0": {
		"prefix": "ans0",
		"body": "int64_t ans = 0;",
		"description": "ans0"
	},
	"endl": {
		"prefix": "endl",
		"body": "cout << endl;",
		"description": "endl"
	},
	"rep":{
		"prefix": "rep",
		"body": [
			"rep(i, n) {",
			"	",	
			"}",
		],
		"description": "rep"
	},
	"rep2":{
		"prefix": "rep2",
		"body": [
			"rep2(i, n) {",
			"	",
			"}",
		],
		"description": "rep2"
	},
	"ALL":{
		"prefix": "ALL",
		"body": "ALL(v);",
		"description": "ALL"
	},
	"Sort":{
		"prefix": "Sort",
		"body": "Sort(v);",
		"description": "Sort"
	},
	"Sort_rev":{
		"prefix": "Sort_rev",
		"body": "Sort(v);reverse(v);"
	},
	"nCr": {
		"prefix": "nCr",
		"body": [
		  "",
		  "int64_t nCr(int64_t n , int64_t r) {",
		  "    if ( n == r || n == 1 || r == 0 ) {",
		  "        return 1;",
		  "    }",
		  "",
		  "    r = min(r, n-r);",
		  "    if ( r == 1 ) {",
		  "        return n;",
		  "    } else {",
		  "        std::vector<std::vector<int64_t> > v(n + 1,std::vector<int64_t>(n + 1, 0));",
		  "        for (int64_t i = 0; i < v.size(); i++) {",
		  "            v[i][0] = 1;",
		  "            v[i][i] = 1;",
		  "        }",
		  "        for (int j = 1; j < v.size(); j++) {",
		  "            for (int64_t k = 1; k < j; k++) {",
		  "                v[j][k] = (v[j - 1][k - 1] + v[j - 1][k]);",
		  "            }",
		  "        }",
		  "        return v[n][r];",
		  "    }",
		  "}",
		  ""
		],
		"description": "nCr"
	},
	"nCr_mod": {
		"prefix": "nCr_mod",
		"body": [
		  "",
		  "int64_t Mod(int64_t a, int64_t mod) {",
		  "    return (a%mod + mod)%mod;",
		  "}",
		  "",
		  "int64_t pow_mod(int64_t x, int64_t n, int64_t mod) {",
		  "    int64_t res = 1;",
		  "    while(n > 0) {",
		  "        if (n & 1) {",
		  "            res = res*x%mod;",
		  "        }",
		  "        x = x*x%mod;",
		  "        n >>= 1;",
		  "    }",
		  "    return res;",
		  "}",
		  "",
		  "int64_t extGCD(int64_t a, int64_t b, int64_t &x, int64_t &y) {",
		  "    if (b == 0) {",
		  "        x = 1;",
		  "        y = 0;",
		  "        return a;",
		  "    }",
		  "    int64_t d = extGCD(b, a%b, y, x);",
		  "    y -= a / b * x;",
		  "    return d;",
		  "}",
		  "",
		  "int64_t modinv(int64_t a, int64_t mod) {",
		  "    int64_t x, y;",
		  "    extGCD(a, mod, x, y);",
		  "    return Mod(x, mod);",
		  "}",
		  "",
		  "int64_t nCr_mod(int64_t n, int64_t r, int64_t mod) {",
		  "    if ( n == r || n == 1 || r == 0 ) {",
		  "        return 1;",
		  "    }",
		  "",
		  "    r = min(r, n-r);",
		  "    if ( r == 1 ) {",
		  "        return n;",
		  "    } else {",
		  "        int64_t n_to_n_r = n;",
		  "        int64_t r_to_1 = r;",
		  "        rep2(i, r-1) {",
		  "            n_to_n_r *= n-i;",
		  "            n_to_n_r %= mod;",
		  "            r_to_1 *= r-i;",
		  "            r_to_1 %= mod;",
		  "        }",
		  "        // r_to_1 = pow_mod(r_to_1, mod-2, mod);",
		  "        r_to_1 = modinv(r_to_1, MOD);",
		  "        return n_to_n_r*r_to_1%mod;",
		  "    }",
		  "}",
		  ""
		],
		"description": "nCr_mod"
	},
	"Mod": {
		"prefix": "Mod",
		"body": [
		  "",
		  "int64_t Mod(int64_t a, int64_t mod) {",
		  "    return (a%mod + mod)%mod;",
		  "}",
		  ""
		],
		"description": "Mod"
	},
	"pow_mod": {
		"prefix": "pow_mod",
		"body": [
		  "",
		  "int64_t pow_mod(int64_t x, int64_t n, int64_t mod) {",
		  "    int64_t res = 1;",
		  "    while(n > 0) {",
		  "        if (n & 1) {",
		  "            res = res*x%mod;",
		  "        }",
		  "        x = x*x%mod;",
		  "        n >>= 1;",
		  "    }",
		  "    return res;",
		  "}",
		  ""
		],
		"description": "pow_mod"
	},
	"vector_pair": {
		"prefix": "vecp",
		"body": "vector<pair<ll, ll> > p;",
		"description": "vector_pair"
	},
	"sort_pair": {
		"prefix": "sortp",
		"body": "sort(ALL(p), pair_Cs);",
		"description": "sort_pair"
	},
	"pairCompareFirst": {
		"prefix": "pcf",
		"body": [
		  "",
		  "bool pair_Cf(const pair<ll, ll>& firstElof, const pair<ll, ll>& secondElof) {",
		  "    return firstElof.first < secondElof.first;",
		  "}",
		  ""
		],
		"description": "pairCompareFirst"
	},
	"pairCompareFirstRev": {
		"prefix": "pcfr",
		"body": [
		  "",
		  "bool pair_Cf_R(const pair<ll, ll>& firstElof, const pair<ll, ll>& secondElof) {",
		  "    return firstElof.first > secondElof.first;",
		  "}",
		  ""
		],
		"description": "pairCompareFirstRev"
	},
	"pairCompareSecond": {
		"prefix": "pcs",
		"body": [
		  "",
		  "bool pair_Cf(const pair<ll, ll>& firstElof, const pair<ll, ll>& secondElof) {",
		  "    return firstElof.first < secondElof.first;",
		  "}",
		  ""
		],
		"description": "pairCompareSecond"
	},
	"pairCompareSecondRev": {
		"prefix": "pcsr",
		"body": [
		  "",
		  "bool pair_Cf_R(const pair<ll, ll>& firstElof, const pair<ll, ll>& secondElof) {",
		  "    return firstElof.first > secondElof.first;",
		  "}",
		  ""
		],
		"description": "pairCompareSecondRev"
	}

}