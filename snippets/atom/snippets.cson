'.source.cpp':
    'int64_t':
        'prefix':'i6'
        'body':'int64_t '
    'input_string':
        'prefix':'ins1'
        'body':'string s;\ncin >> s;'
    'input_array':
        'prefix':'inarray'
        'body':"""
        std::vector<int64_t> a(n);
        rep(i, a.size()) {
            cin >> a[i];
        }
        """
    'input_2arrays':
        'prefix':'in2arrays'
        'body':"""
        std::vector<int64_t> a(n), b(n);
        rep(i, a.size()) {
            cin >> a[i] >> b[i];
        }
        """
    'input_3arrays':
        'prefix':'in3arrays'
        'body':"""
        std::vector<int64_t> a(n), b(n), c(n);
        rep(i, a.size()) {
            cin >> a[i] >> b[i] >> c[i];
        }
        """
    'input_array2':
        'prefix':'inarray2'
        'body':"""
        vector2(a, n, k);
        rep(i, a.size()) {
            rep(j, a[i].size()) {
                cin >> a[i][j];
            }
        }
        """
    'output':
        'prefix':'o'
        'body':'cout << ans << endl;'
    'output2':
        'prefix':'o2'
        'body':'cout << n << " " << m << endl;'
    'output3':
        'prefix':'o3'
        'body':'cout << n << " " << m << " " << k << endl;'
    'output_array':
        'prefix':'oa'
        'body':"""
        rep(i, n) {
            cout << a[i] << " ";
        }
        cout << endl;
        """
    'output_comment':
        'prefix':'oc'
        'body':'cout << "Yes" << endl;'
    'output_comment_ans':
        'prefix':'oca'
        'body':'cout << "a " << ans << endl;'
    'output?':
        'prefix':'o?'
        'body':'cout << ( (ans)? "Yes" : "No" ) << endl;'
    'ans_zero':
        'prefix':'ans0'
        'body':'int64_t ans = 0;'
    'endl':
        'prefix':'endl'
        'body':'cout << endl;'
    'nCr':
        'prefix':'nCr'
        'body':"""

        int64_t nCr(int64_t n , int64_t r) {
            if ( n == r || n == 1 || r == 0 ) {
                return 1;
            }

            r = min(r, n-r);
            if ( r == 1 ) {
                return n;
            } else {
                std::vector<std::vector<int64_t> > v(n + 1,std::vector<int64_t>(n + 1, 0));
                for (int64_t i = 0; i < v.size(); i++) {
                    v[i][0] = 1;
                    v[i][i] = 1;
                }
                for (int j = 1; j < v.size(); j++) {
                    for (int64_t k = 1; k < j; k++) {
                        v[j][k] = (v[j - 1][k - 1] + v[j - 1][k]);
                    }
                }
                return v[n][r];
            }
        }

        """
    'Mod':
        'prefix': 'num Mod'
        'body': """

        int64_t Mod(int64_t a, int64_t mod) {
            return (a%mod + mod)%mod;
        }

        """
    'pow_mod':
        'prefix': 'pow_mod'
        'body': """

        int64_t pow_mod(int64_t x, int64_t n, int64_t mod) {
            int64_t res = 1;
            while(n > 0) {
                if (n & 1) {
                    res = res*x%mod;
                }
                x = x*x%mod;
                n >>= 1;
            }
            return res;
        }

        """
    'truncate':
        'prefix': 'truncate'
        'body': """

        int64_t truncate (int64_t n, int64_t d) {
            int64_t ten = pow(10, d);
            if ( n%ten ) n/=ten;n*=ten;
            return n;
        }

        """
    'rounding':
        'prefix': 'rounding'
        'body': """

        int64_t rounding(int64_t n, int64_t d) {
            int64_t ten = pow(10, d);
            if ( n%ten ) {
                n += 5*pow(10, d-1);
                n/=ten;n*=ten;
            }
            return n;
        }

        """
    'round_up':
        'prefix': 'roundup'
        'body': """

        int64_t round_up(int64_t n, int64_t d) {
            int64_t ten = pow(10, d);
            if ( n%ten ) {
                n += pow(10, d);
                n/=ten;n*=ten;
            }
            return n;
        }

        """
    'ABC_n':
        'prefix': 'ABC_n'
        'body': """

        int64_t ABC_n (int64_t n) {
            int64_t ans = 0;
            rep2(a, n) {
                for (int64_t b = 1; a*b <= n; ++b) {
                    ans += n/a/b;
                }
            }
            return ans;
        }

        """
    'nCr_mod':
        'prefix':'nCr_mod'
        'body':"""

        int64_t Mod(int64_t a, int64_t mod) {
            return (a%mod + mod)%mod;
        }

        int64_t pow_mod(int64_t x, int64_t n, int64_t mod) {
            int64_t res = 1;
            while(n > 0) {
                if (n & 1) {
                    res = res*x%mod;
                }
                x = x*x%mod;
                n >>= 1;
            }
            return res;
        }

        int64_t extGCD(int64_t a, int64_t b, int64_t &x, int64_t &y) {
            if (b == 0) {
                x = 1;
                y = 0;
                return a;
            }
            int64_t d = extGCD(b, a%b, y, x);
            y -= a / b * x;
            return d;
        }

        int64_t modinv(int64_t a, int64_t mod) {
            int64_t x, y;
            extGCD(a, mod, x, y);
            return Mod(x, mod);
        }

        int64_t nCr_mod(int64_t n, int64_t r, int64_t mod) {
            if ( n == r || n == 1 || r == 0 ) {
                return 1;
            }

            r = min(r, n-r);
            if ( r == 1 ) {
                return n;
            } else {
                int64_t n_to_n_r = n;
                int64_t r_to_1 = r;
                rep2(i, r-1) {
                    n_to_n_r *= n-i;
                    n_to_n_r %= mod;
                    r_to_1 *= r-i;
                    r_to_1 %= mod;
                }
                // r_to_1 = pow_mod(r_to_1, mod-2, mod);
                r_to_1 = modinv(r_to_1, MOD);
                return n_to_n_r*r_to_1%mod;
            }
        }

        """
    'pairCompareSecond':
        'prefix':'paircs'
        'body':"""

        bool my_c(pair<int64_t, int64_t> a, pair<int64_t, int64_t> b) {
            // まずsecond
            if ( a.second != b.second ) return a.second < b.second;

            // secondが同じときはfirst
            if ( a.first != b.first ) return a.first < b.first;
            else return true;
        }

        """
    'pairCompareSecondRev':
        'prefix':'paircsrev'
        'body':"""

        bool my_c(pair<int64_t, int64_t> a, pair<int64_t, int64_t> b) {
            // まずsecond
            if ( a.second != b.second ) return a.second > b.second;

            // secondが同じときはfirst
            if ( a.first != b.first ) return a.first < b.first;
            else return true;
        }

        """
    'vector_pair':
        'prefix':'vectorp'
        'body':'vector<pair<int64_t, int64_t> > p;'
    'bfs':
        'prefix':'bfs'
        'body':"""

        void bfs ( Graph G ) {
            std::vector<int64_t> seen(G.size(), 0);
            queue<int64_t> q;
            int64_t start_num = 0;
            q.push(start_num);
            while ( !q.empty() ) {
                int64_t num = q.front();
                seen[num] = 1;
                q.pop();
                rep(i, G[num].size()) {
                    int64_t see = G[num].at(i);
                    if ( seen[see] == 0 ) {
                        q.push(see);
                        seen[see] = 1;
                    }
                }
            }
        }

        """
    'dfs':
        'prefix':'dfs'
        'body':"""

        vector<int64_t> seen;
        Graph G;
        void dfs(int v) {
            seen[v] = true;

            repi(i, G[v]) {
                if (seen[i]) continue;
                dfs(i);
            }
        }

        // G.reserve(n);
        // seen = vector<int64_t>(n, 0);

        """
    'Alphabet':
        'prefix':'alpha'
        'body':"""

        void Alphabet (char s) {
            if (s >= 'a' && s <= 'z') {
                cout << "small" << endl;
            } else if(s >= 'A' && s <= 'Z') {
                cout << "large" << endl;
            } else if(s >= '0') {
                cout << "number" << endl;
            }
            return;
        }

        """
    'div_num':
        'prefix': 'div_num'
        'body': """

        int64_t div_num (int64_t n) {
            vector<int64_t> x(n+1);
    	    int64_t num = n;
            int64_t ans = 1;

            repb2(i, 2, n) {
                while (num%i == 0) {
                    x.at(i)++;
                    num /= i;
                }
            }

            repb2(i, 2, n) {
                ans *= x.at(i)+1;
            }
            return ans;
        }

        """
    'Eratosthenes':
        'prefix': 'era'
        'body': """

        std::vector<int64_t> Eratosthenes( int64_t n ) {
            std::vector<int64_t> is_prime(n+1, 1);

            std::vector<int64_t> P;
            repb2(i, 2, n) {
                if( is_prime[i] ) {
                    for( int j = 2 * i; j <= n; j += i ) is_prime[j] = 0;
                        P.push_back(i);
                }
            }
            return P;
        }

        """
    'UnionFind':
        'prefix': 'UnionFind'
        'body': """

        struct UnionFind {
            vector<int64_t> r;

            UnionFind(int64_t N) {
                r = vector<int64_t>(N, -1);
            }

            int64_t root(int64_t x) {
                if (r[x] < 0) return x;
                return r[x] = root(r[x]);
            }

            bool unite(int64_t x, int64_t y) {
                x = root(x);
                y = root(y);
                if (x == y) return false;
                if (r[x] > r[y]) swap(x, y);
                r[x] += r[y];
                r[y] = x;
                return true;
            }

            int64_t size(int64_t x) {
                return -r[root(x)];
            }
        };

        """
    'dijkstra':
        'prefix': 'dijkstra'
        'body': """

        class DIJKSTRA {
            public:
                int64_t Size;

                struct dk_edge {
                    int64_t to;
                    int64_t cost;
                };

                typedef pair<int64_t, int64_t> PI;  // firstは最短距離、secondは頂点の番号
                vector<vector<dk_edge>> G;
                vector<int64_t> d;      //これ答え。d[i]:=Size[i]までの最短距離
                vector<int64_t> prev;  //経路復元

                DIJKSTRA(int64_t size) {
                    Size = size;
                    G = vector<vector<dk_edge>>(Size);
                    prev = vector<int64_t>(Size, -1);
                }

                void add(int64_t from, int64_t to, int64_t cost) {
                    dk_edge e = {to, cost};
                    G[from].push_back(e);
                }

                void dijkstra(int64_t s) {
                    // greater<P>を指定することでfirstが小さい順に取り出せるようにする
                    priority_queue<PI, vector<PI>, greater<PI>> que;
                    d = vector<int64_t>(Size, INF);
                    d[s] = 0;
                    que.push(PI(0, s));

                    while (!que.empty()) {
                        PI p = que.top();
                        que.pop();
                        int64_t now = p.second;
                        if (d[now] < p.first) continue;
                        rep(i, G[now].size()) {
                            dk_edge e = G[now][i];
                            if (d[e.to] > d[now] + e.cost) {
                                d[e.to] = d[now] + e.cost;
                                prev[e.to] = now;
                                que.push(PI(d[e.to], e.to));
                            }
                        }
                    }
                }

                vector<int64_t> get_path(int64_t t) {
                    vector<int64_t> path;
                    for (; t != -1; t = prev[t]) {
                        // tがsになるまでprev[t]をたどっていく
                        path.push_back(t);
                    }
                    //このままだとt->sの順になっているので逆順にする
                    reverse(path.begin(), path.end());
                    return path;
                }

                void show(void) {
                    for (int i = 0; i < d.size(); i++) cout << d[i] << " ";
                    cout << endl;
                }
        };

        """
    'bit_search':
        'prefix': 'bit'
        'body': """

        rep(s, (1<<n)) {
            rep(i, n) {
                if ( s>>i & 1 ) {

                } else {

                }
            }
        }

        """
    'change_base':
        'prefix': 'change_base'
        'body': """

        std::vector<int64_t> change_base(int64_t a, int64_t base) {
            std::vector<int64_t> res;
            if( a == 0 ) {
                res.push_back(0);
                return res;
            }
            while(a){
                int64_t rest = a%base;
                res.push_back(rest);
                a /= base;
            }
            reverse(ALL(res));
            return res;
        }

        """
    'Compare_string_number':
        'prefix': 'Compare_s_num'
        'body': """

        bool Compare_string_number ( string s, vector<int64_t> v ) {
            if ( v.size() > s.size() ) return true;
            if ( v.size() < s.size() ) return false;

            rep(i, s.size()) {
                int64_t a = ctoi(s[i]), b = v[i];//atoi(v[i].c_str());
                if ( a > b ) {
                    return false;
                } else if ( a < b ) {
                    return true;
                }
            }
            return true;
        }

        """
    'rotate point':
        'prefix': 'rotate'
        'body': """

        pair<long double, long double> rotate ( long double x, long double y,
                                            long double ox, long double oy,
                                            long double theta) {
            x -= ox;
            y -= oy;
            return {x*cos(theta)-y*sin(theta)+ox, y*cos(theta)+x*sin(theta)+oy};
        }

        """
